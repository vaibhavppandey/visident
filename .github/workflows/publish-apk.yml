name: Build & Release Debug APK

on:
  push:
    tags: [ "*" ]
  workflow_dispatch:

jobs:
  build-debug-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Debug APK
      run: ./gradlew assembleDebug --no-daemon --stacktrace
      
    - name: Get APK path and version
      id: apk-info
      run: |
        # Debug: List all APK files
        echo "Listing all APK files in debug directory:"
        ls -la app/build/outputs/apk/debug/ || echo "Debug directory not found"
        
        # Find the debug APK
        APK_PATH=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
        echo "Found APK at: $APK_PATH"
        
        if [ -z "$APK_PATH" ]; then
          echo "Error: No APK found in debug directory"
          exit 1
        fi
        
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        
        # Extract version from build.gradle.kts (Kotlin syntax)
        VERSION_NAME=$(grep "versionName" app/build.gradle.kts | sed 's/.*= *"\([^"]*\)".*/\1/')
        VERSION_CODE=$(grep "versionCode" app/build.gradle.kts | sed 's/.*= *\([0-9]*\).*/\1/')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        
        # Get tag name or use version
        if [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_type }}" == "tag" ]]; then
          RELEASE_NAME="${{ github.ref_name }}"
        else
          RELEASE_NAME="v${VERSION_NAME}-${VERSION_CODE}"
        fi
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        
    - name: Rename APK
      run: |
        APK_PATH="${{ steps.apk-info.outputs.apk_path }}"
        echo "Original APK path: $APK_PATH"
        
        if [ -z "$APK_PATH" ] || [ ! -f "$APK_PATH" ]; then
          echo "Error: APK file not found at $APK_PATH"
          exit 1
        fi
        
        NEW_APK_NAME="visident-${{ steps.apk-info.outputs.release_name }}-debug.apk"
        NEW_APK_PATH="app/build/outputs/apk/debug/${NEW_APK_NAME}"
        
        echo "Renaming APK to: $NEW_APK_NAME"
        echo "New path will be: $NEW_APK_PATH"
        
        mv "$APK_PATH" "$NEW_APK_PATH"
        
        if [ -f "$NEW_APK_PATH" ]; then
          echo "APK successfully renamed"
          echo "renamed_apk_path=$NEW_APK_PATH" >> $GITHUB_OUTPUT
        else
          echo "Error: Failed to rename APK"
          exit 1
        fi
      id: rename-apk
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.apk-info.outputs.release_name }}
        name: Visident ${{ steps.apk-info.outputs.release_name }}
        body: |
          ## Visident Release ${{ steps.apk-info.outputs.release_name }}
          
          ### What's included:
          - Debug APK (signed for development/testing)
          - Version: ${{ steps.apk-info.outputs.version_name }}
          - Build: ${{ steps.apk-info.outputs.version_code }}
          
          ### Installation:
          Download the APK and install on your Android device (requires enabling "Install unknown apps" in settings).
          
          **Note:** This is an unsigned APK for testing purposes.
        files: |
          ${{ steps.rename-apk.outputs.renamed_apk_path }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
